# MySQL Database Configuration
DB_HOST=localhost
DB_PORT=3306
DB_USER=your_db_user
DB_PASSWORD=your_db_password
DB_NAME=your_db_name

# JWT Secret (for authentication)
JWT_SECRET=your_jwt_secret_key

# Email Configuration (for email verification or notifications)
EMAIL_USER=your_email_address
EMAIL_PASS=your_email_password

# App Base URL (used for deployment and local development)
NEXT_PUBLIC_BASE_URL=http://localhost:3000
 //////
CREATE TABLE client_users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(100) NOT NULL,
  email VARCHAR(100) NOT NULL UNIQUE,
  phone_number VARCHAR(20) NOT NULL UNIQUE,
  whatsapp_number VARCHAR(20),
  password VARCHAR(255) NOT NULL,
  county VARCHAR(100) NOT NULL,
  subcounty VARCHAR(100) NOT NULL,
  location VARCHAR(255) NOT NULL,
  user_type VARCHAR(20) NOT NULL DEFAULT 'client',
  is_verified BOOLEAN NOT NULL DEFAULT FALSE,
  verification_token VARCHAR(64),
  verification_token_expires DATETIME,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NULL
);

CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(100) NOT NULL,
  email VARCHAR(100) NOT NULL UNIQUE,
  phone_number VARCHAR(20) NOT NULL,
  password VARCHAR(255) NOT NULL,
  work_category VARCHAR(100),
  county VARCHAR(100),
  is_verified BOOLEAN DEFAULT FALSE,
  verification_token VARCHAR(255),
  verification_token_expires DATETIME,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE job_posts (
  id INT AUTO_INCREMENT PRIMARY KEY,
  client_name VARCHAR(100) NOT NULL,
  title VARCHAR(255) NOT NULL,
  description TEXT NOT NULL,
  county VARCHAR(100) NOT NULL,
  number_of_workers INT,
  gender VARCHAR(20),
  duration VARCHAR(100),
  budget VARCHAR(100),
  phone VARCHAR(20),
  whatsapp VARCHAR(20),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

////
#associate job posts with registered users:
ALTER TABLE job_posts ADD COLUMN user_id INT;
ALTER TABLE job_posts ADD FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL; 
#implement this 

-- Enhanced Database Schema for Password Reset System

-- 1. Enhanced password_reset_tokens table with additional security features
CREATE TABLE IF NOT EXISTS password_reset_tokens (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    token VARCHAR(255) NOT NULL UNIQUE,
    expires_at DATETIME NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    used_at TIMESTAMP NULL,
    ip_address VARCHAR(45) NULL,
    user_agent TEXT NULL,
    UNIQUE KEY unique_email_token (email, token),
    INDEX idx_token (token),
    INDEX idx_email (email),
    INDEX idx_expires_at (expires_at)
);

-- 2. Security logs table for auditing
CREATE TABLE IF NOT EXISTS security_logs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_email VARCHAR(255) NOT NULL,
    action VARCHAR(50) NOT NULL,
    ip_address VARCHAR(45) NULL,
    user_agent TEXT NULL,
    details JSON NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_user_email (user_email),
    INDEX idx_action (action),
    INDEX idx_created_at (created_at)
);

-- 3. Enhanced users table (if not already exists)
CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    first_name VARCHAR(100) NULL,
    last_name VARCHAR(100) NULL,
    email_verified BOOLEAN DEFAULT FALSE,
    failed_login_attempts INT DEFAULT 0,
    locked_until TIMESTAMP NULL,
    last_login TIMESTAMP NULL,
    password_changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_email (email),
    INDEX idx_email_verified (email_verified)
);

-- 4. Create stored procedures for cleanup tasks
DELIMITER //

CREATE PROCEDURE CleanupExpiredTokens()
BEGIN
    DELETE FROM password_reset_tokens 
    WHERE expires_at < NOW() 
    OR used_at IS NOT NULL;
END //

CREATE PROCEDURE CleanupOldSecurityLogs()
BEGIN
    DELETE FROM security_logs 
    WHERE created_at < DATE_SUB(NOW(), INTERVAL 90 DAY);
END //

DELIMITER ;

-- 5. Create events for automatic cleanup (if using MySQL 5.1+)
SET GLOBAL event_scheduler = ON;

CREATE EVENT IF NOT EXISTS cleanup_expired_tokens
ON SCHEDULE EVERY 1 HOUR
DO
  CALL CleanupExpiredTokens();

CREATE EVENT IF NOT EXISTS cleanup_old_security_logs
ON SCHEDULE EVERY 1 DAY
DO
  CALL CleanupOldSecurityLogs();

-- 6. Example triggers for enhanced security
DELIMITER //

-- Trigger to log password changes
CREATE TRIGGER user_password_change_log
    AFTER UPDATE ON users
    FOR EACH ROW
BEGIN
    IF OLD.password != NEW.password THEN
        INSERT INTO security_logs (user_email, action, details)
        VALUES (NEW.email, 'password_changed', JSON_OBJECT(
            'old_password_changed_at', OLD.password_changed_at,
            'new_password_changed_at', NEW.password_changed_at
        ));
    END IF;
END //

-- Trigger to prevent reuse of reset tokens
CREATE TRIGGER mark_token_used
    AFTER SELECT ON password_reset_tokens
    FOR EACH ROW
BEGIN
    IF NEW.token IS NOT NULL AND OLD.used_at IS NULL THEN
        UPDATE password_reset_tokens 
        SET used_at = CURRENT_TIMESTAMP 
        WHERE id = NEW.id;
    END IF;
END //

DELIMITER ;

-- 7. Indexes for performance optimization
CREATE INDEX IF NOT EXISTS idx_security_logs_composite ON security_logs (user_email, action, created_at);
CREATE INDEX IF NOT EXISTS idx_users_locked ON users (locked_until);
CREATE INDEX IF NOT EXISTS idx_users_password_changed ON users (password_changed_at);

-- 8. Views for easy querying
CREATE OR REPLACE VIEW active_password_reset_tokens AS
SELECT * FROM password_reset_tokens
WHERE expires_at > NOW() AND used_at IS NULL;

CREATE OR REPLACE VIEW recent_security_events AS
SELECT * FROM security_logs
WHERE created_at > DATE_SUB(NOW(), INTERVAL 7 DAY)
ORDER BY created_at DESC;

-- 9. Example queries for monitoring (commented out)

-- Check for suspicious password reset activity
/*
SELECT 
    email,
    COUNT(*) as reset_attempts,
    MIN(created_at) as first_attempt,
    MAX(created_at) as last_attempt
FROM password_reset_tokens
WHERE created_at > DATE_SUB(NOW(), INTERVAL 1 DAY)
GROUP BY email
HAVING reset_attempts > 5;
*/

-- Monitor failed login attempts
/*
SELECT 
    email,
    failed_login_attempts,
    locked_until,
    last_login
FROM users
WHERE failed_login_attempts > 0
ORDER BY failed_login_attempts DESC;
*/

